{"componentChunkName":"component---src-components-blog-post-js","path":"/blog/2018-11-09ThatTimeIHackedAQuizAndWon2.5k/","result":{"data":{"markdownRemark":{"html":"<p>So, you might be wondering about something I mention on\nthe home page.</p>\n<blockquote>\n<p>hack an online stem trivia quiz and win lots of money even though I told them I hacked it</p>\n</blockquote>\n<p>This is about that story...</p>\n<h3>How it all started</h3>\n<p>It was spring semester of sophmore year. Almost two years ago as of now.\nI was sitting in semminar, an extra class we had to work on assignments,\nvisit teachers, and the like. My seminar class was in one of the engineering\nrooms, so kids would often come in and work on their engineering assignments.</p>\n<p>Anyways, as I was sitting, I noticed some of my friends in engineering\nhuddled around a computer. There was a lively buzz about them so I went over\nto check out what they were doing.</p>\n<p>I found that they were on some \"STEM Trivia Quiz\" site. What I learned about\nit was just what other people had told me, but basically it was just for our\nschool and was apparently sponsored by some big people.</p>\n<p>I thought it was cool and put a thought in the back of my mind to try it later.</p>\n<p>Later, when I was sitting in my computer science class, our teacher\ninformed all of us about it and invited us to participate if we liked.\nI took this opportunity to try it. As it turns out, I was not very good\nat it. There were many math and general science questions that I was not\nexpecting. I was just expecting engineering/computer science related stuff.</p>\n<p>I decided to mess around with the site for a bit and dug through some of\ntheir code in the chrome developer tools. Their site was written\nin Vue.js. I found I could manipulate parts of the quiz by accessing members\nof the <code class=\"language-text\">vue</code> object.</p>\n<p>I came up with an idea for a program that I could use to bot the site.\nIt would essentially run like this.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// not the exact code</span>\n<span class=\"token comment\">// obviously wont work</span>\n<span class=\"token comment\">// just here to demonstrate logic</span>\n\n<span class=\"token comment\">// this script would get injected</span>\n<span class=\"token comment\">// into the page by a chrome extension</span>\n\n<span class=\"token keyword\">var</span> questions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// botLogic was called using a mutation observer</span>\n<span class=\"token comment\">// don't remember how that worked cause it was two</span>\n<span class=\"token comment\">// years ago and the only time i've used one</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">botLogic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mainScreen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">clickStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>adScreen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setTimer</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">clickContinue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leaderBoard<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">clickContinue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>question<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// the magic happens here</span>\n        \n        <span class=\"token keyword\">var</span> answers <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>blahblahblah<span class=\"token punctuation\">.</span>codetogetanswerelements<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> e<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>questions<span class=\"token punctuation\">[</span>question<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> a <span class=\"token keyword\">in</span> question<span class=\"token punctuation\">.</span>wrongAnswers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                answers<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>answers<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token function\">clickAnswer</span><span class=\"token punctuation\">(</span>answers<span class=\"token punctuation\">[</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> answers<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wrongAnswer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            questions<span class=\"token punctuation\">[</span>question<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>wrongAnswers<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>answer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>questions<span class=\"token punctuation\">[</span>question<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            questions<span class=\"token punctuation\">[</span>question<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> question<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token function\">clickToNextPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Basically, the code clicked through the less-important\nstuff but when it got to a question, if it had seen it before,\nit would choose a random answer based off what it knew was wrong.\nIf it hadn't seen it, it would choose randomly and then update it's knowledge.</p>\n<p>This seemingly worked pretty well cause every question had a unique\nid and the dataset was only a couple hundred large. The program did have a bug\nthough where the learning for some reason didn't work because when I accessed the\nDOM, those values did not reflect the actual html. So essentially, the program\nwas just choosing randomly.</p>\n<p>I ran this next time I was in semminar just to show off a little. One kid\nthought it was pretty cool and asked if he could have it. Being the nice person I am,\nI obfuscated the code and then gave it to him.</p>\n<p>His computer was much faster than the free computer I got off facebook, so,\nhe ran it all night and soon surpassed my lead and got first place with a perfect score.</p>\n<p>I decided to build another bot that could surpass his. He got a perfect score though\nso how is it possible? Well, the website fetched 80 questions back from the server\nand only 79 of those could be answered. The site would break when you tried to answer\nnumber 80. So, he had a score of 79000, but I was going to try and get a score of\n80000.</p>\n<p>I dug through the code some more, to understand how their script worked\nand re-write my own version of it. I found their API calls and eventually found the\ncall to submit an answer, which would benefit me greatly.</p>\n<p>I ran it in the console a few times to test it while I had a quiz running.\nThen, as soon as the quiz ended I had a score given to me. I tried this a few\nmore times, and realized a few key things.</p>\n<ul>\n<li>Their server did not prevent you from answering a question\nmultiple times.</li>\n<li>It also didn't randomize answers, each answer had a unique\nid which was always the same.</li>\n</ul>\n<p>So, just for fun, I tried something. I had learned the correct answer to\nquestion id 1 was <code class=\"language-text\">A1</code>, so I threw together a while true loop in chrome\nthat looked something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/submitAnswer</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n        body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n            answer<span class=\"token operator\">:</span> <span class=\"token string\">'A1'</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Of course, infinite loops are not good, so I let it\nrun for a while and then forced chrome to close.</p>\n<p>I went and checked the leaderboard. I was first place but with a score massively\nhigher than anyone elses. So, next thing I did was run the loop about ten more\ntimes just because I could to fill up the top ten on the leaderboard.</p>\n<p>I felt cool for a while and some people were mad, but of course it was all just a game right.</p>\n<p>Fast forward to about a year ago.</p>\n<p>It was just a normal day and I got a text from some phone number.\nThe text explained that I had won $2,500 from the STEM Trivia Quiz I had participated in\nthey assured me it was no joke and they also sent me an email.\nI sent them my address as they asked.</p>\n<p>I thought about if they had known what I did. They must have right?\nI was the only person with a score anywhere near that high. I was an outlier.</p>\n<p>The next day I emailed them explaining everything that happened.</p>\n<p>No response. But a few weeks later they did respond. To. That. Same. Email. I. Sent. Them.</p>\n<p>They asked if I had gotten the check yet. (Whattt?). I told them I had,\nand they asked for a picture of me holding it. I sent them one a few weeks late cause I forgot.\nThey thanked me, and I haven't heard\nfrom them since.</p>","fields":{"slug":"/blog/2018-11-09ThatTimeIHackedAQuizAndWon2.5k/"},"frontmatter":{"date":"November 09, 2018","title":"That Time I Hacked a Quiz and Won 2.5k"}}},"pageContext":{}},"staticQueryHashes":["3649515864"]}