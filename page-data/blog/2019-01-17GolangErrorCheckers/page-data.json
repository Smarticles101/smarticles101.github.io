{"componentChunkName":"component---src-components-blog-post-js","path":"/blog/2019-01-17GolangErrorCheckers/","result":{"data":{"markdownRemark":{"html":"<p>Recently I saw a line of code while working on the exercism cli:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">if</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Lstat</span><span class=\"token punctuation\">(</span>workspaceDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">!</span>os<span class=\"token punctuation\">.</span><span class=\"token function\">IsNotExist</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>At first glance, it seems someone made a simple logic\nmistake that makes the code less readable. So I made a\n<a href=\"https://github.com/exercism/cli/pull/787\">pull request</a>\nsuggesting this:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-go line-numbers\"><code class=\"language-go\"><span class=\"token keyword\">if</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Lstat</span><span class=\"token punctuation\">(</span>workspaceDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">IsExist</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>Looks like an easy enough change right? I didn't test it but when\nthe CI job failed, I was shocked.</p>\n<h2>Error checkers</h2>\n<p>You may notice that the parameter passed into <code class=\"language-text\">os.IsExist</code> or <code class=\"language-text\">os.IsNotExist</code>\nis <code class=\"language-text\">err</code>. Normally, you might expect to pass the filepath instead.</p>\n<p>Well, golang uses these as error checkers.</p>\n<p>So with <code class=\"language-text\">os.IsExist</code>, it's actually checking for <em>errors that would appear\nif the file exists</em>.</p>\n<p>Let's say you're trying to create a file. The behavior you would expect is for\nthe file to not exist, so if the file does it exist, the corresponding error\nwould be thrown and you could use <code class=\"language-text\">os.IsExist</code> to check it.</p>\n<p>On the contrary, <code class=\"language-text\">os.IsNotExist</code> checks for <em>errors that would occur if\na file doesn't exist</em>.</p>\n<p>This is like the above example where we check if <code class=\"language-text\">workspaceDir</code> exists.</p>\n<p>Since <code class=\"language-text\">os.Lstat</code> expects for it to exist already, it only throws an error\nif <code class=\"language-text\">workspaceDir</code> doesn't exist. Hence, the code used <code class=\"language-text\">!os.IsNotExist(err)</code>\nto check if an error had been thrown. <code class=\"language-text\">os.IsExist(err)</code> doesn't work\nsince no error is thrown if the file exists because that is the expected\nbehavior.</p>\n<h2>!os.IsExist != os.IsNotExist</h2>\n<p>So, the point of this post was to share my experience learning about these\ntwo functions. If you didn't read the whole thing, basically\n<code class=\"language-text\">!os.IsExist != os.IsNotExist</code>!</p>","fields":{"slug":"/blog/2019-01-17GolangErrorCheckers/"},"frontmatter":{"date":"January 17, 2019","title":"Golang Error Checkers: os.IsExist vs os.IsNotExist"}}},"pageContext":{}},"staticQueryHashes":["3649515864"]}