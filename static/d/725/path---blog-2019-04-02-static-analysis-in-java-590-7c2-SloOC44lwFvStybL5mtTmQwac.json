{"data":{"markdownRemark":{"html":"<p>Recently in exercism, we've been working on <code class=\"language-text\">project-auto-mentor</code>.</p>\n<p>The goal of the project is to use static analysis to provide automated mentoring\nfeedback to students. This will free-up mentors more, making their job easier.\nYou can read more about it <a href=\"https://exercism.io/blog/automated-mentoring-support-project\">on the exercism blog</a>.</p>\n<p>I decided to take a stab at creating the initial two-fer analyzer for java.</p>\n<p>Knowing nothing about abstract syntax trees, I gave it a google, which is basically\nthe best way to learn stuff. They're basically a way to represent source code as a tree,\nwith each node representing some construct in the code.</p>\n<p>There's a java package <code class=\"language-text\">com.github.javaparser</code> built for exactly this, which makes it\nway easy to parse java code.</p>\n<p>First, we need a <code class=\"language-text\">com.github.javaparser.ast.CompilationUnit</code>, which contains\nour syntax tree. To get one, we can use:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>javaparser<span class=\"token punctuation\">.</span>JavaParser<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>javaparser<span class=\"token punctuation\">.</span>ParseProblemException<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>javaparser<span class=\"token punctuation\">.</span>ast<span class=\"token punctuation\">.</span>CompilationUnit<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>File<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>FileNotFoundException<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\nCompilationUnit ut<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    ut <span class=\"token operator\">=</span> JavaParser<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Twofer.java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ParseProblemException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    System<span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Parse error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FileNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    System<span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Twofer.java not found\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This will create our CompilationUnit, pulling the Twofer exercise from it's source file\nat the project root.</p>\n<p>CompilationUnit has two methods that would be of interest of us to parse the solution.\n<code class=\"language-text\">.accept</code> runs a callback with a <code class=\"language-text\">.visit</code> method which is overloaded for each code construct.\nOr, we can use <code class=\"language-text\">.walk</code> which runs a <code class=\"language-text\">Consumer</code> to consume each <code class=\"language-text\">Node</code>.</p>\n<p>Specifically we want our analyzer to detect non-optimal solutions to two-fer.\nTo me, the following solution is optimal. It uses the <code class=\"language-text\">Optional</code> class to get a default\nvalue instead of using an if statement or ternary operator. It also uses <code class=\"language-text\">String.format</code>\nto avoid any string concatenation.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Optional<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Twofer</span> <span class=\"token punctuation\">{</span>\n  String <span class=\"token function\">twofer</span><span class=\"token punctuation\">(</span>String name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"One for %s, one for me.\"</span><span class=\"token punctuation\">,</span> Optional<span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"you\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>After examining the 500 most recent two-fer solutions, I came up with a few points.</p>\n<p>Reasons to \"disapprove\" a solution:</p>\n<ul>\n<li>failed parse\n-- java code is malformed in some way</li>\n<li>malformed class or method name\n** tests shouldn't run in the first place</li>\n<li>hardcoded test data\n** won't work against any data it hasn't seen</li>\n<li>string concatenation\n** Strings are immutable, each + means another object</li>\n<li>no method calls, if statements, or conditionals\n** solution shouldn't work in the first place</li>\n</ul>\n<p>Reasons to \"approve\" a solution but leave comments:</p>\n<ul>\n<li>student uses if statement or ternary operator\n** suggest using Optional class</li>\n</ul>\n<p>Reasons to refer to mentor:</p>\n<ul>\n<li>analyzer failed to find solution</li>\n<li></li>\n</ul>","fields":{"slug":"/blog/2019-04-02StaticAnalysisInJava/"},"frontmatter":{"date":"April 02, 2019","title":"Static Analysis in Java"}}},"pageContext":{}}