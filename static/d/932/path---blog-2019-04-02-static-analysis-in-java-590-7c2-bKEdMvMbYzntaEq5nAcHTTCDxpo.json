{"data":{"markdownRemark":{"html":"<p>Recently at exercism, we've been working on <code class=\"language-text\">project-auto-mentor</code>.</p>\n<p>The goal of the project is to use static analysis to provide automated mentoring\nfeedback to students. This will free-up mentors more, making their job easier.\nYou can read more about it <a href=\"https://exercism.io/blog/automated-mentoring-support-project\">on the exercism blog</a>.</p>\n<p>I decided to take a stab at creating the initial two-fer analyzer for java.</p>\n<p>Knowing nothing about abstract syntax trees, I gave it a google, which is basically\nthe best way to learn stuff. They're basically a way to represent source code as a tree,\nwith each node representing some construct in the code.</p>\n<h2>Parsing</h2>\n<p>There's a java package <code class=\"language-text\">com.github.javaparser</code> built for exactly this, which makes it\nway easy to parse java code.</p>\n<p>First, we need a <code class=\"language-text\">com.github.javaparser.ast.CompilationUnit</code>, which contains\nour syntax tree. To get one, we can use:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>javaparser<span class=\"token punctuation\">.</span>JavaParser<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>javaparser<span class=\"token punctuation\">.</span>ParseProblemException<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>javaparser<span class=\"token punctuation\">.</span>ast<span class=\"token punctuation\">.</span>CompilationUnit<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>File<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>FileNotFoundException<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\nCompilationUnit ut<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    ut <span class=\"token operator\">=</span> JavaParser<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Twofer.java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ParseProblemException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    System<span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Parse error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FileNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    System<span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Twofer.java not found\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This will create our CompilationUnit, pulling the Twofer exercise from it's source file\nat the project root.</p>\n<p>CompilationUnit has two methods that would be of interest of us to parse the solution.\n<code class=\"language-text\">.accept</code> runs a callback with a <code class=\"language-text\">.visit</code> method which is overloaded for each code construct.\nOr, we can use <code class=\"language-text\">.walk</code> which runs a <code class=\"language-text\">Consumer</code> to consume each <code class=\"language-text\">Node</code>.</p>\n<h2>The optimal two-fer solution</h2>\n<p>Specifically we want our analyzer to detect non-optimal solutions to two-fer.\nTo me, the following solution is optimal. It uses the <code class=\"language-text\">Optional</code> class to get a default\nvalue instead of using an if statement or ternary operator. It also uses <code class=\"language-text\">String.format</code>\nto avoid any string concatenation.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Optional<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Twofer</span> <span class=\"token punctuation\">{</span>\n  String <span class=\"token function\">twofer</span><span class=\"token punctuation\">(</span>String name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"One for %s, one for me.\"</span><span class=\"token punctuation\">,</span> Optional<span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"you\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>After examining the 500 most recent two-fer solutions, I came up with a few key points.</p>\n<h4>Reasons to \"disapprove\" a solution:</h4>\n<ul>\n<li>\n<p>failed parse</p>\n<ul>\n<li>java code is malformed in some way</li>\n</ul>\n</li>\n<li>\n<p>malformed class or method name</p>\n<ul>\n<li>tests shouldn't run in the first place</li>\n</ul>\n</li>\n<li>\n<p>hardcoded test data</p>\n<ul>\n<li>won't work against any data it hasn't seen</li>\n</ul>\n</li>\n<li>\n<p>string concatenation</p>\n<ul>\n<li>Strings are immutable, each + means another object</li>\n</ul>\n</li>\n<li>\n<p>no method calls, if statements, or conditionals</p>\n<ul>\n<li>solution shouldn't work in the first place</li>\n</ul>\n</li>\n</ul>\n<h4>Reasons to \"approve\" a solution but leave comments:</h4>\n<ul>\n<li>\n<p>student uses if statement or ternary operator</p>\n<ul>\n<li>suggest using Optional class</li>\n</ul>\n</li>\n</ul>\n<h4>Reasons to refer to mentor:</h4>\n<ul>\n<li>analyzer failed to find solution</li>\n<li>loops, lambda statements, or anything else that's weird</li>\n</ul>\n<h2>Analyzing the solution</h2>\n<p>In my analyzer, I create a class that I can use the <code class=\"language-text\">.walk</code> method with.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>function<span class=\"token punctuation\">.</span>Consumer<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TwoferWalker</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Consumer</span><span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Node<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>Node node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, I can test for some of the structures I was looking for in my notes:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>javaparser<span class=\"token punctuation\">.</span>ast<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>ClassOrInterfaceDeclaration<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>javaparser<span class=\"token punctuation\">.</span>ast<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>MethodDeclaration<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>javaparser<span class=\"token punctuation\">.</span>ast<span class=\"token punctuation\">.</span>expr<span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>function<span class=\"token punctuation\">.</span>Consumer<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TwoferWalker</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Consumer</span><span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Node<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">boolean</span> hasClassTwofer<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">boolean</span> hasMethodTwofer<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">boolean</span> hasHardCodedTestCases<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>Node node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ClassOrInterfaceDeclaration</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hasClassTwofer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ClassOrInterfaceDeclaration<span class=\"token punctuation\">)</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Twofer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">MethodDeclaration</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hasMethodTwofer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>MethodDeclaration<span class=\"token punctuation\">)</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"twofer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">StringLiteralExpr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hasHardCodedTestCases <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>and finally I just need the logic to handle the booleans after I walk the tree:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">TwoferWalker walker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TwoferWalker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cu<span class=\"token punctuation\">.</span><span class=\"token function\">walk</span><span class=\"token punctuation\">(</span>walker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>walker<span class=\"token punctuation\">.</span>hasClassTwofer <span class=\"token operator\">&amp;&amp;</span> walker<span class=\"token punctuation\">.</span>hasMethodTwofer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>statusObject<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"disapprove_with_comment\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>comments<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.general.properClassAndMethodNames\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>walker<span class=\"token punctuation\">.</span>hasHardCodedTestCases<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>statusObject<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"disapprove_with_comment\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>comments<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.general.hardCodedTestCases\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>Currently, the analyzer runs with these stats on the 500 most recent two-fer\nexercises:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">totals: {\n    disapprove_with_comment: 337, \n    refer_to_mentor: 11, \n    approve_with_comment: 147, \n    approve_as_optimal: 5\n},\ndisapprovalComments: {\n    java.general.hardCodedTestCases: 5, \n    java.general.failedParse: 5, \n    java.general.properClassAndMethodNames: 16, \n    java.two-fer.noConditionsOrMethodCalls: 11, \n    java.general.stringConcatenation: 300\n}</code></pre></div>","fields":{"slug":"/blog/2019-04-02StaticAnalysisInJava/"},"frontmatter":{"date":"April 02, 2019","title":"Static Analysis for Exercism.io in Java"}}},"pageContext":{}}